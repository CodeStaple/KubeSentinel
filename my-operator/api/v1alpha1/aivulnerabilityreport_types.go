package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// AIVulnerabilityReportSpec defines the desired state of AIVulnerabilityReport.
// It specifies the target for vulnerability scanning and any configuration for the scan.
type AIVulnerabilityReportSpec struct {
	// Image is the container image to be scanned for vulnerabilities (e.g., "nginx:latest" or "myrepo/myimage:v1.2.3").
	// This field is required.
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MinLength=1
	Image string `json:"image"`

	// Scanner specifies the vulnerability scanner to use (e.g., "Trivy", "Clair", "Grype").
	// If not specified, a default scanner may be used.
	// +optional
	Scanner string `json:"scanner,omitempty"`

	// ScanOptions provides additional options for the scanner, as a JSON string or key-value map.
	// Example: '{"severity": "HIGH,CRITICAL", "ignoreUnfixed": "true"}'
	// +optional
	ScanOptions string `json:"scanOptions,omitempty"` // Consider a more structured type if options become complex
}

// AIVulnerabilityReportStatus defines the observed state of AIVulnerabilityReport.
// It holds the results and status of the vulnerability scan.
type AIVulnerabilityReportStatus struct {
	// Summary contains a high-level summary of the scan results (e.g., "Found 5 critical vulnerabilities").
	// +optional
	Summary string `json:"summary,omitempty"`

	// Vulnerabilities is a list of found vulnerabilities.
	// Each item could be a string representation or a more structured object.
	// Example: ["CVE-2023-12345: High - Package foo", "CVE-2023-67890: Medium - Package bar"]
	// +optional
	Vulnerabilities []string `json:"vulnerabilities,omitempty"` // Consider a structured type for VulnerabilityDetails later

	// CriticalCount is the number of critical vulnerabilities found.
	// +optional
	CriticalCount int32 `json:"criticalCount,omitempty"`

	// HighCount is the number of high severity vulnerabilities found.
	// +optional
	HighCount int32 `json:"highCount,omitempty"`

	// MediumCount is the number of medium severity vulnerabilities found.
	// +optional
	MediumCount int32 `json:"mediumCount,omitempty"`

	// LowCount is the number of low severity vulnerabilities found.
	// +optional
	LowCount int32 `json:"lowCount,omitempty"`

	// LastScanTime records the timestamp when the scan was last performed.
	// +optional
	LastScanTime *metav1.Time `json:"lastScanTime,omitempty"`

	// Error stores any error messages encountered during the scan process.
	// +optional
	Error string `json:"error,omitempty"`

	// ObservedGeneration is the most recent generation observed by the controller.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`

	// Conditions store the status conditions of the AIVulnerabilityReport instances
	// +operator-sdk:csv:customresourcedefinitions:type=status
	// +optional
	Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
}

// AIVulnerabilityReport is the Schema for the aivulnerabilityreports API.
// It represents a request to scan a container image for vulnerabilities and store the findings.
// This can be used to trigger scans and consume reports, potentially with AI-driven prioritization or summary.
//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
//+kubebuilder:printcolumn:name="Image",type="string",JSONPath=".spec.image",description="Image scanned"
//+kubebuilder:printcolumn:name="Critical",type="integer",JSONPath=".status.criticalCount",description="Critical vulnerabilities"
//+kubebuilder:printcolumn:name="High",type="integer",JSONPath=".status.highCount",description="High vulnerabilities"
//+kubebuilder:printcolumn:name="Medium",type="integer",JSONPath=".status.mediumCount",description="Medium vulnerabilities"
//+kubebuilder:printcolumn:name="Low",type="integer",JSONPath=".status.lowCount",description="Low vulnerabilities"
//+kubebuilder:printcolumn:name="LastScanTime",type="date",JSONPath=".status.lastScanTime",description="Time of the last scan"
//+kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
//+kubebuilder:resource:path=aivulnerabilityreports,scope=Namespaced,shortName=avr
type AIVulnerabilityReport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   AIVulnerabilityReportSpec   `json:"spec,omitempty"`
	Status AIVulnerabilityReportStatus `json:"status,omitempty"`
}

// AIVulnerabilityReportList contains a list of AIVulnerabilityReport
//+kubebuilder:object:root=true
type AIVulnerabilityReportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AIVulnerabilityReport `json:"items"`
}

func init() {
	SchemeBuilder.Register(&AIVulnerabilityReport{}, &AIVulnerabilityReportList{})
}
